# How to setup ruby 2.1.1 rails 4.1 node 0.10.26 postgresql 9.3 heroku git on EC2

# First create EC2 instance on AWS. Choose ubuntu 12.0.4. Download the keyvaluepair locally. Change permissions for the keyvaluepair and then connect to the instance through SSH. 

# changing permissions
chmod 400 mykeyvaluepair.pem 

#ssh into instance
ssh -i mykeyvaluepair.pem ubuntu@ec2-54-....compute.amazonaws.com

#it's also much eaiser to create a file in your local .ssh folder and create a file called config and put the following details in

Host awshost
HostName ec2-50-...restofaddresshere.compute.amazonaws.com
User ubuntu
IdentityFile "~/.ssh/mykeyvaluepair.pem"

#now you can just ssh in like so:
ssh awshost

#update the package list so that future installs are up to date
sudo apt-get update

#install heroku (optional)
wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh

#login with heroku
heroku login
ssh-keygen -t rsa
heroku keys:add

# install git and other dependencies needed 
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev

# EC2 free instance gives you 8 gigs free. You can do df--si to see how much space you are using in case you are worried you are going over

#install RVM

sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev
curl -Lk https://get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
echo "source ~/.rvm/scripts/rvm" >> ~/.bashrc
rvm install 2.1.1
rvm use 2.1.1 --default
ruby -v

# while the above worked, one warning came up that said "No Binary rubies available for: ubuntu/12.04/x86_64/ruby-2.1.1. Continuing with compilation. Please read rvm help mount to get more information on binary rubies. However I wasn't able to find any binaries for ubuntu 12.04 x86_64 for ruby 2.1.1 

#tell Rubygems not to install documentation for each package locally
echo "gem: --no-ri --no-rdoc" > ~/.gemrc

#config git
git config --global color.ui true
git config --global user.name "Chowza"
git config --global user.email "terence.chow.1986@gmail.com"
ssh-keygen -t rsa -C "terence.chow.1986@gmail.com"

#go to your github.com/settings/ssh and user the below command to copy and paste into a new ssh in github
cat ~/.ssh/id_rsa.pub

#check to see if it worked:
ssh -T git@github.com
# you should see Hi Chowza authentication successful....

# install node js
sudo add-apt-repository ppa:chris-lea/node.js
sudo apt-get update
sudo apt-get install nodejs

#install rails
gem install rails

# check rails version
rails -v

# Optional: setup mysql don't forget to add password to your rails app in database.yml, note that the below uses the gem mysql2 which is automatically created when you create a new rails app with rails new myapp -d mysql
sudo apt-get install mysql-server mysql-client libmysqlclient-dev

# Optional setup postgresql
sudo sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
sudo apt-get update
sudo apt-get install postgresql-common
sudo apt-get install postgresql-9.3 libpq-dev

# create a postgresql user
sudo -u postgres createuser tchow -s

#create password
sudo -u postgres psql
postgres=#\password tchow
# then enter password
# once done entering password you can type \q to get out of the postgresql shell

#like the mysql setup, when you create a new rails app, use rails new myapp -d postgresql and this will auto setup your rails app to have postgresql in development. Also, this implies that it will use the gem pg. Don't forget to configure database.yml to have the correct username and password.

# Congrats you're all done!